# This file was created automatically by SWIG.
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _td

def _swig_setattr(self,class_type,name,value):
    if (name == "this"):
        if isinstance(value, class_type):
            self.__dict__[name] = value.this
            if hasattr(value,"thisown"): self.__dict__["thisown"] = value.thisown
            del value.thisown
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    self.__dict__[name] = value

def _swig_getattr(self,class_type,name):
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


TD_VERTEX = _td.TD_VERTEX
TD_NORMAL = _td.TD_NORMAL
TD_TEXVERTEX = _td.TD_TEXVERTEX
TD_COLOR = _td.TD_COLOR
TD_MATERIAL = _td.TD_MATERIAL
TD_ALL = _td.TD_ALL
TD_INFO = _td.TD_INFO
TD_WARNING = _td.TD_WARNING
TD_ERROR = _td.TD_ERROR
TD_NOMEMORY = _td.TD_NOMEMORY
TD_FATAL = _td.TD_FATAL
TD_POINTS = _td.TD_POINTS
TD_LINES = _td.TD_LINES
TD_LINE_LOOP = _td.TD_LINE_LOOP
TD_LINE_STRIP = _td.TD_LINE_STRIP
TD_TRIANGLES = _td.TD_TRIANGLES
TD_TRIANGLE_STRIP = _td.TD_TRIANGLE_STRIP
TD_TRIANGLE_FAN = _td.TD_TRIANGLE_FAN
TD_QUADS = _td.TD_QUADS
TD_QUAD_STRIP = _td.TD_QUAD_STRIP
TD_POLYGON = _td.TD_POLYGON
TD_FALSE = _td.TD_FALSE
TD_TRUE = _td.TD_TRUE
class TDtranslation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TDtranslation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TDtranslation, name)
    def __repr__(self):
        return "<C TDtranslation instance at %s>" % (self.this,)
    __swig_setmethods__["x"] = _td.TDtranslation_x_set
    __swig_getmethods__["x"] = _td.TDtranslation_x_get
    if _newclass:x = property(_td.TDtranslation_x_get, _td.TDtranslation_x_set)
    __swig_setmethods__["y"] = _td.TDtranslation_y_set
    __swig_getmethods__["y"] = _td.TDtranslation_y_get
    if _newclass:y = property(_td.TDtranslation_y_get, _td.TDtranslation_y_set)
    __swig_setmethods__["z"] = _td.TDtranslation_z_set
    __swig_getmethods__["z"] = _td.TDtranslation_z_get
    if _newclass:z = property(_td.TDtranslation_z_get, _td.TDtranslation_z_set)
    __swig_setmethods__["x_delta"] = _td.TDtranslation_x_delta_set
    __swig_getmethods__["x_delta"] = _td.TDtranslation_x_delta_get
    if _newclass:x_delta = property(_td.TDtranslation_x_delta_get, _td.TDtranslation_x_delta_set)
    __swig_setmethods__["y_delta"] = _td.TDtranslation_y_delta_set
    __swig_getmethods__["y_delta"] = _td.TDtranslation_y_delta_get
    if _newclass:y_delta = property(_td.TDtranslation_y_delta_get, _td.TDtranslation_y_delta_set)
    __swig_setmethods__["z_delta"] = _td.TDtranslation_z_delta_set
    __swig_getmethods__["z_delta"] = _td.TDtranslation_z_delta_get
    if _newclass:z_delta = property(_td.TDtranslation_z_delta_get, _td.TDtranslation_z_delta_set)
    def __init__(self, *args):
        _swig_setattr(self, TDtranslation, 'this', _td.new_TDtranslation(*args))
        _swig_setattr(self, TDtranslation, 'thisown', 1)
    def __del__(self, destroy=_td.delete_TDtranslation):
        try:
            if self.thisown: destroy(self)
        except: pass

class TDtranslationPtr(TDtranslation):
    def __init__(self, this):
        _swig_setattr(self, TDtranslation, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, TDtranslation, 'thisown', 0)
        _swig_setattr(self, TDtranslation,self.__class__,TDtranslation)
_td.TDtranslation_swigregister(TDtranslationPtr)

class TDrotation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TDrotation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TDrotation, name)
    def __repr__(self):
        return "<C TDrotation instance at %s>" % (self.this,)
    __swig_setmethods__["i"] = _td.TDrotation_i_set
    __swig_getmethods__["i"] = _td.TDrotation_i_get
    if _newclass:i = property(_td.TDrotation_i_get, _td.TDrotation_i_set)
    __swig_setmethods__["j"] = _td.TDrotation_j_set
    __swig_getmethods__["j"] = _td.TDrotation_j_get
    if _newclass:j = property(_td.TDrotation_j_get, _td.TDrotation_j_set)
    __swig_setmethods__["k"] = _td.TDrotation_k_set
    __swig_getmethods__["k"] = _td.TDrotation_k_get
    if _newclass:k = property(_td.TDrotation_k_get, _td.TDrotation_k_set)
    __swig_setmethods__["i_delta"] = _td.TDrotation_i_delta_set
    __swig_getmethods__["i_delta"] = _td.TDrotation_i_delta_get
    if _newclass:i_delta = property(_td.TDrotation_i_delta_get, _td.TDrotation_i_delta_set)
    __swig_setmethods__["j_delta"] = _td.TDrotation_j_delta_set
    __swig_getmethods__["j_delta"] = _td.TDrotation_j_delta_get
    if _newclass:j_delta = property(_td.TDrotation_j_delta_get, _td.TDrotation_j_delta_set)
    __swig_setmethods__["k_delta"] = _td.TDrotation_k_delta_set
    __swig_getmethods__["k_delta"] = _td.TDrotation_k_delta_get
    if _newclass:k_delta = property(_td.TDrotation_k_delta_get, _td.TDrotation_k_delta_set)
    def __init__(self, *args):
        _swig_setattr(self, TDrotation, 'this', _td.new_TDrotation(*args))
        _swig_setattr(self, TDrotation, 'thisown', 1)
    def __del__(self, destroy=_td.delete_TDrotation):
        try:
            if self.thisown: destroy(self)
        except: pass

class TDrotationPtr(TDrotation):
    def __init__(self, this):
        _swig_setattr(self, TDrotation, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, TDrotation, 'thisown', 0)
        _swig_setattr(self, TDrotation,self.__class__,TDrotation)
_td.TDrotation_swigregister(TDrotationPtr)

class TDcolor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TDcolor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TDcolor, name)
    def __repr__(self):
        return "<C TDcolor instance at %s>" % (self.this,)
    __swig_setmethods__["r"] = _td.TDcolor_r_set
    __swig_getmethods__["r"] = _td.TDcolor_r_get
    if _newclass:r = property(_td.TDcolor_r_get, _td.TDcolor_r_set)
    __swig_setmethods__["g"] = _td.TDcolor_g_set
    __swig_getmethods__["g"] = _td.TDcolor_g_get
    if _newclass:g = property(_td.TDcolor_g_get, _td.TDcolor_g_set)
    __swig_setmethods__["b"] = _td.TDcolor_b_set
    __swig_getmethods__["b"] = _td.TDcolor_b_get
    if _newclass:b = property(_td.TDcolor_b_get, _td.TDcolor_b_set)
    __swig_setmethods__["a"] = _td.TDcolor_a_set
    __swig_getmethods__["a"] = _td.TDcolor_a_get
    if _newclass:a = property(_td.TDcolor_a_get, _td.TDcolor_a_set)
    def __init__(self, *args):
        _swig_setattr(self, TDcolor, 'this', _td.new_TDcolor(*args))
        _swig_setattr(self, TDcolor, 'thisown', 1)
    def __del__(self, destroy=_td.delete_TDcolor):
        try:
            if self.thisown: destroy(self)
        except: pass

class TDcolorPtr(TDcolor):
    def __init__(self, this):
        _swig_setattr(self, TDcolor, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, TDcolor, 'thisown', 0)
        _swig_setattr(self, TDcolor,self.__class__,TDcolor)
_td.TDcolor_swigregister(TDcolorPtr)

class TDteximage(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TDteximage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TDteximage, name)
    def __repr__(self):
        return "<C TDteximage instance at %s>" % (self.this,)
    __swig_setmethods__["width"] = _td.TDteximage_width_set
    __swig_getmethods__["width"] = _td.TDteximage_width_get
    if _newclass:width = property(_td.TDteximage_width_get, _td.TDteximage_width_set)
    __swig_setmethods__["height"] = _td.TDteximage_height_set
    __swig_getmethods__["height"] = _td.TDteximage_height_get
    if _newclass:height = property(_td.TDteximage_height_get, _td.TDteximage_height_set)
    __swig_setmethods__["data"] = _td.TDteximage_data_set
    __swig_getmethods__["data"] = _td.TDteximage_data_get
    if _newclass:data = property(_td.TDteximage_data_get, _td.TDteximage_data_set)
    def __init__(self, *args):
        _swig_setattr(self, TDteximage, 'this', _td.new_TDteximage(*args))
        _swig_setattr(self, TDteximage, 'thisown', 1)
    def __del__(self, destroy=_td.delete_TDteximage):
        try:
            if self.thisown: destroy(self)
        except: pass

class TDteximagePtr(TDteximage):
    def __init__(self, this):
        _swig_setattr(self, TDteximage, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, TDteximage, 'thisown', 0)
        _swig_setattr(self, TDteximage,self.__class__,TDteximage)
_td.TDteximage_swigregister(TDteximagePtr)

class TDmaterial(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TDmaterial, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TDmaterial, name)
    def __repr__(self):
        return "<C TDmaterial instance at %s>" % (self.this,)
    __swig_setmethods__["name"] = _td.TDmaterial_name_set
    __swig_getmethods__["name"] = _td.TDmaterial_name_get
    if _newclass:name = property(_td.TDmaterial_name_get, _td.TDmaterial_name_set)
    __swig_setmethods__["color"] = _td.TDmaterial_color_set
    __swig_getmethods__["color"] = _td.TDmaterial_color_get
    if _newclass:color = property(_td.TDmaterial_color_get, _td.TDmaterial_color_set)
    __swig_setmethods__["ambient"] = _td.TDmaterial_ambient_set
    __swig_getmethods__["ambient"] = _td.TDmaterial_ambient_get
    if _newclass:ambient = property(_td.TDmaterial_ambient_get, _td.TDmaterial_ambient_set)
    __swig_setmethods__["diffuse"] = _td.TDmaterial_diffuse_set
    __swig_getmethods__["diffuse"] = _td.TDmaterial_diffuse_get
    if _newclass:diffuse = property(_td.TDmaterial_diffuse_get, _td.TDmaterial_diffuse_set)
    __swig_setmethods__["specular"] = _td.TDmaterial_specular_set
    __swig_getmethods__["specular"] = _td.TDmaterial_specular_get
    if _newclass:specular = property(_td.TDmaterial_specular_get, _td.TDmaterial_specular_set)
    __swig_setmethods__["emmission"] = _td.TDmaterial_emmission_set
    __swig_getmethods__["emmission"] = _td.TDmaterial_emmission_get
    if _newclass:emmission = property(_td.TDmaterial_emmission_get, _td.TDmaterial_emmission_set)
    __swig_setmethods__["shininess"] = _td.TDmaterial_shininess_set
    __swig_getmethods__["shininess"] = _td.TDmaterial_shininess_get
    if _newclass:shininess = property(_td.TDmaterial_shininess_get, _td.TDmaterial_shininess_set)
    __swig_setmethods__["teximage"] = _td.TDmaterial_teximage_set
    __swig_getmethods__["teximage"] = _td.TDmaterial_teximage_get
    if _newclass:teximage = property(_td.TDmaterial_teximage_get, _td.TDmaterial_teximage_set)
    __swig_setmethods__["dlist"] = _td.TDmaterial_dlist_set
    __swig_getmethods__["dlist"] = _td.TDmaterial_dlist_get
    if _newclass:dlist = property(_td.TDmaterial_dlist_get, _td.TDmaterial_dlist_set)
    __swig_setmethods__["next"] = _td.TDmaterial_next_set
    __swig_getmethods__["next"] = _td.TDmaterial_next_get
    if _newclass:next = property(_td.TDmaterial_next_get, _td.TDmaterial_next_set)
    def __init__(self, *args):
        _swig_setattr(self, TDmaterial, 'this', _td.new_TDmaterial(*args))
        _swig_setattr(self, TDmaterial, 'thisown', 1)
    def __del__(self, destroy=_td.delete_TDmaterial):
        try:
            if self.thisown: destroy(self)
        except: pass

class TDmaterialPtr(TDmaterial):
    def __init__(self, this):
        _swig_setattr(self, TDmaterial, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, TDmaterial, 'thisown', 0)
        _swig_setattr(self, TDmaterial,self.__class__,TDmaterial)
_td.TDmaterial_swigregister(TDmaterialPtr)

class TDvertex(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TDvertex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TDvertex, name)
    def __repr__(self):
        return "<C TDvertex instance at %s>" % (self.this,)
    __swig_setmethods__["x"] = _td.TDvertex_x_set
    __swig_getmethods__["x"] = _td.TDvertex_x_get
    if _newclass:x = property(_td.TDvertex_x_get, _td.TDvertex_x_set)
    __swig_setmethods__["y"] = _td.TDvertex_y_set
    __swig_getmethods__["y"] = _td.TDvertex_y_get
    if _newclass:y = property(_td.TDvertex_y_get, _td.TDvertex_y_set)
    __swig_setmethods__["z"] = _td.TDvertex_z_set
    __swig_getmethods__["z"] = _td.TDvertex_z_get
    if _newclass:z = property(_td.TDvertex_z_get, _td.TDvertex_z_set)
    __swig_setmethods__["w"] = _td.TDvertex_w_set
    __swig_getmethods__["w"] = _td.TDvertex_w_get
    if _newclass:w = property(_td.TDvertex_w_get, _td.TDvertex_w_set)
    def __init__(self, *args):
        _swig_setattr(self, TDvertex, 'this', _td.new_TDvertex(*args))
        _swig_setattr(self, TDvertex, 'thisown', 1)
    def __del__(self, destroy=_td.delete_TDvertex):
        try:
            if self.thisown: destroy(self)
        except: pass

class TDvertexPtr(TDvertex):
    def __init__(self, this):
        _swig_setattr(self, TDvertex, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, TDvertex, 'thisown', 0)
        _swig_setattr(self, TDvertex,self.__class__,TDvertex)
_td.TDvertex_swigregister(TDvertexPtr)

class TDtexvertex(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TDtexvertex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TDtexvertex, name)
    def __repr__(self):
        return "<C TDtexvertex instance at %s>" % (self.this,)
    __swig_setmethods__["u"] = _td.TDtexvertex_u_set
    __swig_getmethods__["u"] = _td.TDtexvertex_u_get
    if _newclass:u = property(_td.TDtexvertex_u_get, _td.TDtexvertex_u_set)
    __swig_setmethods__["v"] = _td.TDtexvertex_v_set
    __swig_getmethods__["v"] = _td.TDtexvertex_v_get
    if _newclass:v = property(_td.TDtexvertex_v_get, _td.TDtexvertex_v_set)
    __swig_setmethods__["w"] = _td.TDtexvertex_w_set
    __swig_getmethods__["w"] = _td.TDtexvertex_w_get
    if _newclass:w = property(_td.TDtexvertex_w_get, _td.TDtexvertex_w_set)
    def __init__(self, *args):
        _swig_setattr(self, TDtexvertex, 'this', _td.new_TDtexvertex(*args))
        _swig_setattr(self, TDtexvertex, 'thisown', 1)
    def __del__(self, destroy=_td.delete_TDtexvertex):
        try:
            if self.thisown: destroy(self)
        except: pass

class TDtexvertexPtr(TDtexvertex):
    def __init__(self, this):
        _swig_setattr(self, TDtexvertex, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, TDtexvertex, 'thisown', 0)
        _swig_setattr(self, TDtexvertex,self.__class__,TDtexvertex)
_td.TDtexvertex_swigregister(TDtexvertexPtr)

class TDnormal(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TDnormal, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TDnormal, name)
    def __repr__(self):
        return "<C TDnormal instance at %s>" % (self.this,)
    __swig_setmethods__["i"] = _td.TDnormal_i_set
    __swig_getmethods__["i"] = _td.TDnormal_i_get
    if _newclass:i = property(_td.TDnormal_i_get, _td.TDnormal_i_set)
    __swig_setmethods__["j"] = _td.TDnormal_j_set
    __swig_getmethods__["j"] = _td.TDnormal_j_get
    if _newclass:j = property(_td.TDnormal_j_get, _td.TDnormal_j_set)
    __swig_setmethods__["k"] = _td.TDnormal_k_set
    __swig_getmethods__["k"] = _td.TDnormal_k_get
    if _newclass:k = property(_td.TDnormal_k_get, _td.TDnormal_k_set)
    def __init__(self, *args):
        _swig_setattr(self, TDnormal, 'this', _td.new_TDnormal(*args))
        _swig_setattr(self, TDnormal, 'thisown', 1)
    def __del__(self, destroy=_td.delete_TDnormal):
        try:
            if self.thisown: destroy(self)
        except: pass

class TDnormalPtr(TDnormal):
    def __init__(self, this):
        _swig_setattr(self, TDnormal, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, TDnormal, 'thisown', 0)
        _swig_setattr(self, TDnormal,self.__class__,TDnormal)
_td.TDnormal_swigregister(TDnormalPtr)

class TDface(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TDface, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TDface, name)
    def __repr__(self):
        return "<C TDface instance at %s>" % (self.this,)
    __swig_setmethods__["num_vertices"] = _td.TDface_num_vertices_set
    __swig_getmethods__["num_vertices"] = _td.TDface_num_vertices_get
    if _newclass:num_vertices = property(_td.TDface_num_vertices_get, _td.TDface_num_vertices_set)
    __swig_setmethods__["num_texvertices"] = _td.TDface_num_texvertices_set
    __swig_getmethods__["num_texvertices"] = _td.TDface_num_texvertices_get
    if _newclass:num_texvertices = property(_td.TDface_num_texvertices_get, _td.TDface_num_texvertices_set)
    __swig_setmethods__["num_normals"] = _td.TDface_num_normals_set
    __swig_getmethods__["num_normals"] = _td.TDface_num_normals_get
    if _newclass:num_normals = property(_td.TDface_num_normals_get, _td.TDface_num_normals_set)
    __swig_setmethods__["vertices"] = _td.TDface_vertices_set
    __swig_getmethods__["vertices"] = _td.TDface_vertices_get
    if _newclass:vertices = property(_td.TDface_vertices_get, _td.TDface_vertices_set)
    __swig_setmethods__["texvertices"] = _td.TDface_texvertices_set
    __swig_getmethods__["texvertices"] = _td.TDface_texvertices_get
    if _newclass:texvertices = property(_td.TDface_texvertices_get, _td.TDface_texvertices_set)
    __swig_setmethods__["normals"] = _td.TDface_normals_set
    __swig_getmethods__["normals"] = _td.TDface_normals_get
    if _newclass:normals = property(_td.TDface_normals_get, _td.TDface_normals_set)
    __swig_setmethods__["normal"] = _td.TDface_normal_set
    __swig_getmethods__["normal"] = _td.TDface_normal_get
    if _newclass:normal = property(_td.TDface_normal_get, _td.TDface_normal_set)
    __swig_setmethods__["next"] = _td.TDface_next_set
    __swig_getmethods__["next"] = _td.TDface_next_get
    if _newclass:next = property(_td.TDface_next_get, _td.TDface_next_set)
    def __init__(self, *args):
        _swig_setattr(self, TDface, 'this', _td.new_TDface(*args))
        _swig_setattr(self, TDface, 'thisown', 1)
    def __del__(self, destroy=_td.delete_TDface):
        try:
            if self.thisown: destroy(self)
        except: pass

class TDfacePtr(TDface):
    def __init__(self, this):
        _swig_setattr(self, TDface, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, TDface, 'thisown', 0)
        _swig_setattr(self, TDface,self.__class__,TDface)
_td.TDface_swigregister(TDfacePtr)

class TDgroup(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TDgroup, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TDgroup, name)
    def __repr__(self):
        return "<C TDgroup instance at %s>" % (self.this,)
    __swig_setmethods__["name"] = _td.TDgroup_name_set
    __swig_getmethods__["name"] = _td.TDgroup_name_get
    if _newclass:name = property(_td.TDgroup_name_get, _td.TDgroup_name_set)
    __swig_setmethods__["material"] = _td.TDgroup_material_set
    __swig_getmethods__["material"] = _td.TDgroup_material_get
    if _newclass:material = property(_td.TDgroup_material_get, _td.TDgroup_material_set)
    __swig_setmethods__["num_faces"] = _td.TDgroup_num_faces_set
    __swig_getmethods__["num_faces"] = _td.TDgroup_num_faces_get
    if _newclass:num_faces = property(_td.TDgroup_num_faces_get, _td.TDgroup_num_faces_set)
    __swig_setmethods__["faces"] = _td.TDgroup_faces_set
    __swig_getmethods__["faces"] = _td.TDgroup_faces_get
    if _newclass:faces = property(_td.TDgroup_faces_get, _td.TDgroup_faces_set)
    __swig_setmethods__["num_triangles"] = _td.TDgroup_num_triangles_set
    __swig_getmethods__["num_triangles"] = _td.TDgroup_num_triangles_get
    if _newclass:num_triangles = property(_td.TDgroup_num_triangles_get, _td.TDgroup_num_triangles_set)
    __swig_setmethods__["triangles"] = _td.TDgroup_triangles_set
    __swig_getmethods__["triangles"] = _td.TDgroup_triangles_get
    if _newclass:triangles = property(_td.TDgroup_triangles_get, _td.TDgroup_triangles_set)
    __swig_setmethods__["num_quads"] = _td.TDgroup_num_quads_set
    __swig_getmethods__["num_quads"] = _td.TDgroup_num_quads_get
    if _newclass:num_quads = property(_td.TDgroup_num_quads_get, _td.TDgroup_num_quads_set)
    __swig_setmethods__["quads"] = _td.TDgroup_quads_set
    __swig_getmethods__["quads"] = _td.TDgroup_quads_get
    if _newclass:quads = property(_td.TDgroup_quads_get, _td.TDgroup_quads_set)
    __swig_setmethods__["dlist"] = _td.TDgroup_dlist_set
    __swig_getmethods__["dlist"] = _td.TDgroup_dlist_get
    if _newclass:dlist = property(_td.TDgroup_dlist_get, _td.TDgroup_dlist_set)
    __swig_setmethods__["next"] = _td.TDgroup_next_set
    __swig_getmethods__["next"] = _td.TDgroup_next_get
    if _newclass:next = property(_td.TDgroup_next_get, _td.TDgroup_next_set)
    def __init__(self, *args):
        _swig_setattr(self, TDgroup, 'this', _td.new_TDgroup(*args))
        _swig_setattr(self, TDgroup, 'thisown', 1)
    def __del__(self, destroy=_td.delete_TDgroup):
        try:
            if self.thisown: destroy(self)
        except: pass

class TDgroupPtr(TDgroup):
    def __init__(self, this):
        _swig_setattr(self, TDgroup, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, TDgroup, 'thisown', 0)
        _swig_setattr(self, TDgroup,self.__class__,TDgroup)
_td.TDgroup_swigregister(TDgroupPtr)

class TDobject(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TDobject, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TDobject, name)
    def __repr__(self):
        return "<C TDobject instance at %s>" % (self.this,)
    __swig_setmethods__["name"] = _td.TDobject_name_set
    __swig_getmethods__["name"] = _td.TDobject_name_get
    if _newclass:name = property(_td.TDobject_name_get, _td.TDobject_name_set)
    __swig_setmethods__["center"] = _td.TDobject_center_set
    __swig_getmethods__["center"] = _td.TDobject_center_get
    if _newclass:center = property(_td.TDobject_center_get, _td.TDobject_center_set)
    __swig_setmethods__["maximum"] = _td.TDobject_maximum_set
    __swig_getmethods__["maximum"] = _td.TDobject_maximum_get
    if _newclass:maximum = property(_td.TDobject_maximum_get, _td.TDobject_maximum_set)
    __swig_setmethods__["minimum"] = _td.TDobject_minimum_set
    __swig_getmethods__["minimum"] = _td.TDobject_minimum_get
    if _newclass:minimum = property(_td.TDobject_minimum_get, _td.TDobject_minimum_set)
    __swig_setmethods__["width"] = _td.TDobject_width_set
    __swig_getmethods__["width"] = _td.TDobject_width_get
    if _newclass:width = property(_td.TDobject_width_get, _td.TDobject_width_set)
    __swig_setmethods__["height"] = _td.TDobject_height_set
    __swig_getmethods__["height"] = _td.TDobject_height_get
    if _newclass:height = property(_td.TDobject_height_get, _td.TDobject_height_set)
    __swig_setmethods__["depth"] = _td.TDobject_depth_set
    __swig_getmethods__["depth"] = _td.TDobject_depth_get
    if _newclass:depth = property(_td.TDobject_depth_get, _td.TDobject_depth_set)
    __swig_setmethods__["translation"] = _td.TDobject_translation_set
    __swig_getmethods__["translation"] = _td.TDobject_translation_get
    if _newclass:translation = property(_td.TDobject_translation_get, _td.TDobject_translation_set)
    __swig_setmethods__["rotation"] = _td.TDobject_rotation_set
    __swig_getmethods__["rotation"] = _td.TDobject_rotation_get
    if _newclass:rotation = property(_td.TDobject_rotation_get, _td.TDobject_rotation_set)
    __swig_setmethods__["num_vertices"] = _td.TDobject_num_vertices_set
    __swig_getmethods__["num_vertices"] = _td.TDobject_num_vertices_get
    if _newclass:num_vertices = property(_td.TDobject_num_vertices_get, _td.TDobject_num_vertices_set)
    __swig_setmethods__["num_texvertices"] = _td.TDobject_num_texvertices_set
    __swig_getmethods__["num_texvertices"] = _td.TDobject_num_texvertices_get
    if _newclass:num_texvertices = property(_td.TDobject_num_texvertices_get, _td.TDobject_num_texvertices_set)
    __swig_setmethods__["num_normals"] = _td.TDobject_num_normals_set
    __swig_getmethods__["num_normals"] = _td.TDobject_num_normals_get
    if _newclass:num_normals = property(_td.TDobject_num_normals_get, _td.TDobject_num_normals_set)
    __swig_setmethods__["vertices"] = _td.TDobject_vertices_set
    __swig_getmethods__["vertices"] = _td.TDobject_vertices_get
    if _newclass:vertices = property(_td.TDobject_vertices_get, _td.TDobject_vertices_set)
    __swig_setmethods__["texvertices"] = _td.TDobject_texvertices_set
    __swig_getmethods__["texvertices"] = _td.TDobject_texvertices_get
    if _newclass:texvertices = property(_td.TDobject_texvertices_get, _td.TDobject_texvertices_set)
    __swig_setmethods__["normals"] = _td.TDobject_normals_set
    __swig_getmethods__["normals"] = _td.TDobject_normals_get
    if _newclass:normals = property(_td.TDobject_normals_get, _td.TDobject_normals_set)
    __swig_setmethods__["num_materials"] = _td.TDobject_num_materials_set
    __swig_getmethods__["num_materials"] = _td.TDobject_num_materials_get
    if _newclass:num_materials = property(_td.TDobject_num_materials_get, _td.TDobject_num_materials_set)
    __swig_setmethods__["materials"] = _td.TDobject_materials_set
    __swig_getmethods__["materials"] = _td.TDobject_materials_get
    if _newclass:materials = property(_td.TDobject_materials_get, _td.TDobject_materials_set)
    __swig_setmethods__["num_groups"] = _td.TDobject_num_groups_set
    __swig_getmethods__["num_groups"] = _td.TDobject_num_groups_get
    if _newclass:num_groups = property(_td.TDobject_num_groups_get, _td.TDobject_num_groups_set)
    __swig_setmethods__["groups"] = _td.TDobject_groups_set
    __swig_getmethods__["groups"] = _td.TDobject_groups_get
    if _newclass:groups = property(_td.TDobject_groups_get, _td.TDobject_groups_set)
    __swig_setmethods__["num_faces"] = _td.TDobject_num_faces_set
    __swig_getmethods__["num_faces"] = _td.TDobject_num_faces_get
    if _newclass:num_faces = property(_td.TDobject_num_faces_get, _td.TDobject_num_faces_set)
    __swig_setmethods__["display_list"] = _td.TDobject_display_list_set
    __swig_getmethods__["display_list"] = _td.TDobject_display_list_get
    if _newclass:display_list = property(_td.TDobject_display_list_get, _td.TDobject_display_list_set)
    __swig_setmethods__["next"] = _td.TDobject_next_set
    __swig_getmethods__["next"] = _td.TDobject_next_get
    if _newclass:next = property(_td.TDobject_next_get, _td.TDobject_next_set)
    def __init__(self, *args):
        _swig_setattr(self, TDobject, 'this', _td.new_TDobject(*args))
        _swig_setattr(self, TDobject, 'thisown', 1)
    def __del__(self, destroy=_td.delete_TDobject):
        try:
            if self.thisown: destroy(self)
        except: pass

class TDobjectPtr(TDobject):
    def __init__(self, this):
        _swig_setattr(self, TDobject, 'this', this)
        if not hasattr(self,"thisown"): _swig_setattr(self, TDobject, 'thisown', 0)
        _swig_setattr(self, TDobject,self.__class__,TDobject)
_td.TDobject_swigregister(TDobjectPtr)


tdDraw = _td.tdDraw

tdGenDList = _td.tdGenDList

tdWriteObject = _td.tdWriteObject

tdReadObject = _td.tdReadObject

tdReadTeximage = _td.tdReadTeximage

tdGenTriangles = _td.tdGenTriangles

tdGenQuads = _td.tdGenQuads

tdGenSmoothNormals = _td.tdGenSmoothNormals

tdGenSpheremapTexvertices = _td.tdGenSpheremapTexvertices

tdGenLinearTexvertices = _td.tdGenLinearTexvertices

tdVerbose = _td.tdVerbose

tdNewObject = _td.tdNewObject

tdDeleteObject = _td.tdDeleteObject

tdSize = _td.tdSize

tdGetError = _td.tdGetError

