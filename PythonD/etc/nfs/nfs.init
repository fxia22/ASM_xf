#!/bin/sh
#
# nfs           This shell script takes care of starting and stopping
#               the NFS services.
#
# chkconfig: - 60 20
# description: NFS is a popular protocol for file sharing across TCP/IP \
#              networks. This service provides NFS server functionality, \
#              which is configured via the /etc/exports file.
# probe: true
# config: /etc/sysconfig/nfs

# Source function library.
. /etc/rc.d/init.d/functions

# Source networking configuration.
if [ ! -f /etc/sysconfig/network ]; then
    exit 0
fi

. /etc/sysconfig/network

# Check that networking is up.
[ ${NETWORKING} = "no" ] && exit 0

[ -x /usr/sbin/rpc.nfsd ] || exit 0
[ -x /usr/sbin/rpc.mountd ] || exit 0
[ -x /usr/sbin/exportfs ] || exit 0
[ -s /etc/exports ] || exit 0

# Check for and source configuration file otherwise set defaults
# TUNE_QUEUE: controls whether to up the size of input queues
[ -f /etc/sysconfig/nfs ] && . /etc/sysconfig/nfs

[ -z "$MOUNTD_NFS_V2" ] && MOUNTD_NFS_V2=auto
[ -z "$MOUNTD_NFS_V3" ] && MOUNTD_NFS_V3=auto

# Number of servers to be started by default
[ -z "$NFSDCOUNT" ] && NFSDCOUNT=8

# Remote quota server
[ -z "$RQUOTAD" ] && RQUOTAD=`type -path rpc.rquotad`

# Get the initial values for the input sock queues
# at the time of running the script.
if [ "$TUNE_QUEUE" = "yes" ]; then
    RMEM_DEFAULT=`/sbin/sysctl -n net.core.rmem_default`
    RMEM_MAX=`/sbin/sysctl -n net.core.rmem_max`
    # 256kb recommended minimum size based on SPECsfs NFS benchmarks
    [ -z "$NFS_QS" ] && NFS_QS=262144
fi

# See how we were called.
case "$1" in
  start)
	# Start daemons.
	# Apply input queue increase for nfs server
	if [ "$TUNE_QUEUE" = "yes" ]; then
 	    /sbin/sysctl -w net.core.rmem_default=$NFSD_QS >/dev/null 2>&1
	    /sbin/sysctl -w net.core.rmem_max=$NFSD_QS >/dev/null 2>&1
	fi
	action "Starting NFS services: " /usr/sbin/exportfs -r
	if [ -n "$RQUOTAD" -a "$RQUOTAD" != "no" ]; then
	    echo -n "Starting NFS quotas: "
	    daemon rpc.rquotad
	    echo
	fi
	echo -n "Starting NFS daemon: "
	daemon rpc.nfsd $NFSDCOUNT
	echo

	[ -n "$MOUNTD_PORT" ] \
	&& MOUNTD_OPTIONS="$MOUNTD_OPTIONS -p $MOUNTD_PORT"
	[ "$MOUNTD_TCP" = "no" -o "$MOUNTD_TCP" = "NO" ] \
	&& MOUNTD_OPTIONS="$MOUNTD_OPTIONS --no-tcp"

	case $MOUNTD_NFS_V2 in
	auto|AUTO)
	    # Let's see if we support NFS version 2.
	    /usr/sbin/rpcinfo -u localhost nfs 2 &>/dev/null
	    if [ $? -ne 0 ]; then
		MOUNTD_OPTIONS="$MOUNTD_OPTIONS --no-nfs-version 2"
	    fi
	    ;;
	no|NO)
	    MOUNTD_OPTIONS="$MOUNTD_OPTIONS --no-nfs-version 2"
	    ;;
	yes|YES)
	    MOUNTD_OPTIONS="$MOUNTD_OPTIONS --nfs-version 2"
	    ;;
	esac

	case $MOUNTD_NFS_V3 in
	auto|AUTO)
	    # Let's see if we support NFS version 3.
	    /usr/sbin/rpcinfo -u localhost nfs 3 &>/dev/null
	    if [ $? -ne 0 ]; then
		MOUNTD_OPTIONS="$MOUNTD_OPTIONS --no-nfs-version 3"
	    fi
	    ;;
	no|NO)
	    MOUNTD_OPTIONS="$MOUNTD_OPTIONS --no-nfs-version 3"
	    ;;
	yes|YES)
	    MOUNTD_OPTIONS="$MOUNTD_OPTIONS --nfs-version 3"
	    ;;
	esac

	echo -n "Starting NFS mountd: "
	daemon rpc.mountd $MOUNTD_OPTIONS
	echo
	touch /var/lock/subsys/nfs
	# reset input queue for rest of network services
	if [ "$TUNE_QUEUE" = "yes" ]; then
	    /sbin/sysctl -w net.core.rmem_default=$RMEM_DEFAULT >/dev/null 2>&1
	    /sbin/sysctl -w net.core.rmem_max=$RMEM_MAX >/dev/null 2>&1
	fi
	;;
  stop)
	# Stop daemons.
	echo -n "Shutting down NFS mountd: "
	killproc rpc.mountd
	echo
	echo -n "Shutting down NFS daemon: "
	killproc nfsd
	echo
	if [ -n "$RQUOTAD" ]; then
		echo -n "Shutting down NFS quotas: "
		killproc rpc.rquotad
		echo
	fi
	# Do it the last so that clients can still access the server
	# when the server is running.
	action "Shutting down NFS services: " /usr/sbin/exportfs -au
	rm -f /var/lock/subsys/nfs
	;;
  status)
	status rpc.mountd
	status nfsd
	if [ -n "$RQUOTAD" ]; then
		status rpc.rquotad
	fi
	;;
  restart)
	$0 stop
	$0 start
	;;
  reload)
	/usr/sbin/exportfs -r
	touch /var/lock/subsys/nfs
	;;
  probe)
	if [ ! -f /var/lock/subsys/nfs ] ; then
	  echo start; exit 0
	fi
	/sbin/pidof rpc.mountd >/dev/null 2>&1; MOUNTD="$?"
	/sbin/pidof nfsd >/dev/null 2>&1; NFSD="$?"
	if [ $MOUNTD = 1 -o $NFSD = 1 ] ; then
	  echo restart; exit 0
	fi
	if [ /etc/exports -nt /var/lock/subsys/nfs ] ; then
	  echo reload; exit 0
	fi
	;;
  *)
	echo "Usage: nfs {start|stop|status|restart|reload}"
	exit 1
esac

exit 0
